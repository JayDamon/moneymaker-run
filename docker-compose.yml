version: '3'

services:

  account-link-service:
   container_name: account-link-service
   build:
     context: ./../account-link-service
     dockerfile: ./../account-link-service/Dockerfile
   restart: always
   ports:
     - "8090:3000"
   depends_on:
     keycloak:
       condition: service_healthy
   deploy:
     mode: replicated
     replicas: 1
   environment:
    - HOST_PORT=3000
    - APPLICATION_NAME=account-link-service
    - USER_SERVICE_URL=http://user-service:8091
    - ISSUER_URI=http://keycloak:8081/auth
    - CLIENT_NAME=account-link-service
    - CLIENT_SECRET=jj4we3bbQI28PiFDEYhRSGV9ElpZKQly
    - REALM=moneymaker
    - DEBUG_ACTIVE=false
    - PLAID_CLIENT_ID=638ce7594b9630001797c186
    - PLAID_SECRET=ee3f49e8b290d2723e2ae95c850006
    - PLAID_ENV=sandbox
    - PLAID_PRODUCTS=auth,transactions
    - PLAID_COUNTRY_CODES=US
    - RABBITMQ_HOST=mm-mq
    - RABBITMQ_PORT=5672
    - RABBITMQ_USERNAME=test
    - RABBITMQ_PASSWORD=test
    - CONFIGURE_CORS=false
#    - PLAID_REDIRECT_URI=

  account-update-service:
    container_name: account-update-service
    build:
      context: ./../account-update-service
      dockerfile: ./../account-update-service/Dockerfile
    restart: always
    ports:
      - "8092:3000"
    depends_on:
      keycloak:
        condition: service_healthy
      rabbit-mq:
        condition: service_started
      account-service-db:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - HOST_PORT=3000
      - USER_SERVICE_URL=http://user-service:8091
      - ISSUER_URI=http://keycloak:8081/auth
      - CLIENT_NAME=account-update-service
      - CLIENT_SECRET=jhWIofATdH4H8dstmdNGafYy7oP7MIEh
      - REALM=moneymaker
      - DEBUG_ACTIVE=false
      - PLAID_CLIENT_ID=638ce7594b9630001797c186
      - PLAID_SECRET=ee3f49e8b290d2723e2ae95c850006
      - PLAID_ENV=sandbox
      - PLAID_PRODUCTS=auth
      - PLAID_COUNTRY_CODES=US
      - RABBITMQ_HOST=mm-mq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=test
      - RABBITMQ_PASSWORD=test
      - DB_HOST=account-service-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=accounts
      - DB_CHARSET=utf8
      - APPLICATION_NAME=account-update-service
      - CONFIGURE_CORS=false

  account-service-db:
    container_name: account-service-db
    image: "postgres:${POSTGRES_VERSION:?err}"
    ports:
      - "5438:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "accounts" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: accounts
  #    volumes:
  #      - ./data/account-service/:/var/lib/postgresql/data/

  transaction-update-service:
    container_name: transaction-update-service
    build:
      context: ./../transaction-update-service
      dockerfile: ./../transaction-update-service/Dockerfile
    restart: always
    ports:
      - "8093:3000"
    depends_on:
      keycloak:
        condition: service_healthy
      rabbit-mq:
        condition: service_started
      transaction-service-db:
        condition: service_healthy
    deploy:
      mode: replicated
      replicas: 1
    environment:
      - HOST_PORT=3000
      - USER_SERVICE_URL=http://user-service:8093
      - ISSUER_URI=http://keycloak:8081/auth
      - CLIENT_NAME=transaction-update-service
      - CLIENT_SECRET=dNndXNn2soKyTAq4pGessNFclL2UhZ1v
      - REALM=moneymaker
      - DEBUG_ACTIVE=false
      - DB_HOST=transaction-service-db
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=transactions
      - DB_CHARSET=utf8
      - PLAID_CLIENT_ID=638ce7594b9630001797c186
      - PLAID_SECRET=ee3f49e8b290d2723e2ae95c850006
      - PLAID_ENV=sandbox
      - PLAID_PRODUCTS=auth
      - PLAID_COUNTRY_CODES=US
      - RABBITMQ_HOST=mm-mq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=test
      - RABBITMQ_PASSWORD=test
      - APPLICATION_NAME=transaction-update-service
      - CONFIGURE_CORS=false

  transaction-service-db:
    container_name: transaction-service-db
    image: "postgres:${POSTGRES_VERSION:?err}"
    ports:
      - "5437:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "transactions" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: transactions
  #    volumes:
  #      - ./data/transaction-service-deprecated/:/var/lib/postgresql/data/

  user-service:
   container_name: user-service
   build:
     context: ./../user-service
     dockerfile: ./../user-service/Dockerfile
   restart: always
   depends_on:
     user-service-db:
       condition: service_healthy
     keycloak:
       condition: service_healthy
   ports:
     - "8091:8091"
   deploy:
     mode: replicated
     replicas: 1
   environment:
     - DB_HOST=user-service-db
     - DB_PORT=5432
     - DB_USER=postgres
     - DB_PASSWORD=password
     - DB_NAME=users
     - DB_CHARSET=utf8
     - CLIENT_NAME=user-service
     - CLIENT_SECRET=aumoSmpgYugHVpiQvH0T4IYUzZslLh3T
     - RABBITMQ_HOST=mm-mq
     - RABBITMQ_PORT=5672
     - RABBITMQ_USERNAME=test
     - RABBITMQ_PASSWORD=test
     - REALM=moneymaker
     - CONFIGURE_CORS=false

  user-service-db:
    container_name: user-service-db
    image: "postgres:${POSTGRES_VERSION:?err}"
    ports:
      - "5433:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "users" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'
    environment:
      POSTGRES_DB: users
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
#    volumes:
#      - ./data/user-service/:/var/lib/postgresql/data/

  admin-service:
    container_name: admin-service
    build:
      context: ./../admin-service
      dockerfile: ./../admin-service/Dockerfile
    restart: always
    healthcheck:
      test: "curl --fail --silent localhost:8079/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
    depends_on:
      - discovery
    ports:
      - "8079:8079"
    environment:
      SPRING_PROFILES_ACTIVE: localdocker

  discovery:
    container_name: discovery
    build:
      context: ./../service-discovery
      dockerfile: ./../service-discovery/Dockerfile
    restart: always
    healthcheck:
      test: "curl --fail --silent localhost:8761/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
    ports:
      - "8761:8761"
    environment:
      SPRING_PROFILES_ACTIVE: localdocker

  gateway:
    container_name: gateway
    build:
      context: ./../moneymaker-api-gateway-service
      dockerfile: ./../moneymaker-api-gateway-service/Dockerfile
    restart: always
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 5
    depends_on:
      - admin-service
      - discovery
#      admin-service:
#        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: localdocker

#  account-service:
#    container_name: account-service
#    build:
#      context: ./../account-service
#      dockerfile: ./../account-service/Dockerfile
#    restart: always
#    healthcheck:
#      test: "curl --fail --silent localhost:8080/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status==\"UP\" else false end' > /dev/null || exit 1"
#      interval: 20s
#      timeout: 5s
#      retries: 3
#      start_period: 15s
#    depends_on:
#      - account-service-deprecated-db
#      - admin-service
#      - rabbit-mq
#      - keycloak
#    ports:
#      - "8083:8080"
#    environment:
#      SPRING_PROFILES_ACTIVE: localdocker
#
#  account-service-deprecated-db:
#    container_name: account-service-deprecated-db
#    image: "postgres:${POSTGRES_VERSION:?err}"
#    ports:
#      - "5434:5432"
#    restart: unless-stopped
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "accounts" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    deploy:
#      resources:
#        limits:
#          memory: 500M
#          cpus: '0.5'
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: accounts
##    volumes:
##      - ./data/account-service/:/var/lib/postgresql/data/

  budget-service:
    container_name: budget-service
    build:
      context: ./../budget-service
      dockerfile: ./../budget-service/Dockerfile
    restart: always
    healthcheck:
      test: "curl --fail --silent localhost:8084
4
4
4       --exit-status -n 'inputs | if has(\"status\") then .status==\"UP\" else false end' > /dev/null || exit 1"
      interval: 20s
      timeout: 5s
      retries: 3
    depends_on:
      - budget-service-db
      - admin-service
      - rabbit-mq
      - keycloak
    ports:
      - "8084:8080"
    environment:
      SPRING_PROFILES_ACTIVE: localdocker

  budget-service-db:
    container_name: budget-service-db
    image: "postgres:${POSTGRES_VERSION:?err}"
    ports:
      - "5435:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "budgets" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: budgets
#    volumes:
#      - ./data/budget-service/:/var/lib/postgresql/data/

#  transaction-service:
#    container_name: transaction-service
#    build:
#      context: ./../transaction-service
#      dockerfile: ./../transaction-service/Dockerfile
#    restart: always
#    healthcheck:
#      test: "curl --fail --silent localhost:8080/actuator/health | jq --exit-status -n 'inputs | if has(\"status\") then .status==\"UP\" else false end' > /dev/null || exit 1"
#      interval: 20s
#      timeout: 5s
#      retries: 3
#      start_period: 15s
#    depends_on:
#      - transaction-service-deprecated-db
#      - admin-service
#      - rabbit-mq
#      - keycloak
#    ports:
#      - "8082:8080"
#    environment:
#      SPRING_PROFILES_ACTIVE: localdocker
#
#  transaction-service-deprecated-db:
#    container_name: transaction-service-deprecated-db
#    image: "postgres:${POSTGRES_VERSION:?err}"
#    ports:
#      - "5436:5432"
#    restart: unless-stopped
#    healthcheck:
#      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "transactions" ]
#      interval: 10s
#      timeout: 5s
#      retries: 5
#    deploy:
#      resources:
#        limits:
#          memory: 500M
#          cpus: '0.5'
#    environment:
#      POSTGRES_USER: postgres
#      POSTGRES_PASSWORD: password
#      POSTGRES_DB: transactions
##    volumes:
##      - ./data/transaction-service-deprecated/:/var/lib/postgresql/data/

  keycloak-db:
    container_name: keycloak-db
    image: "postgres:${POSTGRES_VERSION:?err}"
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "keycloak"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    # temporary 95 Mb volume for Postgres data
#    volumes:
#      - ./data/keycloak/:/var/lib/postgresql/data/
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'

  keycloak:
    container_name: keycloak
    image: "quay.io/keycloak/keycloak:${KC_VERSION:?err}"
    command: ["start-dev", "--import-realm", "--http-relative-path=/auth", "--http-port=8081"]
    restart: unless-stopped
    depends_on:
      keycloak-db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8081/auth/health/ready"]
      interval: 40s
      timeout: 30s
      retries: 3
    environment:
      KC_DB: postgres
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: password
      KC_DB_URL: "jdbc:postgresql://keycloak-db:5432/keycloak"
      KC_METRICS_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_FEATURES: ${KC_FEATURES}
      KC_REALM_NAME: ${KC_REALM_NAME}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN:-admin}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD:-keycloak}
#    ports:
#      - mode: ingress
#        target: 8080
#        published: ${KC_PORT:-8080}
#        protocol: tcp
#    expose:
#      - "8081"
    ports:
      - "8081:8081"
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json
    deploy:
      resources:
        limits:
          memory: 500M
          cpus: '0.5'

  rabbit-mq:
    container_name: mm-mq
    image: rabbitmq:3-management
    volumes:
      - 'rabbitmq_data:/data'
#      - ./data/rabbitmq/etc/:/etc/rabbitmq/
#      - ./data/rabbitmq/data/:/var/lib/rabbitmq/
#      - ./data/rabbitmq/logs/:/var/log/rabbitmq/
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: test
      RABBITMQ_DEFAULT_PASS: test

  keycloak-data:
    container_name: keycloak-data
    build:
      context: ./keycloak
      dockerfile: ./Dockerfile
    depends_on:
      keycloak:
        condition: service_healthy

volumes:
  rabbitmq_data: